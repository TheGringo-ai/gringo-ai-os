name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black isort flake8
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check .
    
    - name: Check import sorting with isort
      run: |
        isort --check-only .
    
    - name: Test with pytest
      run: |
        pytest --cov=. --cov-report=xml
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit
    
    - name: Run safety check
      run: |
        safety check
    
    - name: Run bandit security linter
      run: |
        bandit -r . -x tests/

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test installation
      run: |
        python -c "import streamlit; print('Streamlit installed successfully')"
        python -c "import pandas; print('Pandas installed successfully')"
        python -c "import psutil; print('Psutil installed successfully')"
    
    - name: Create release artifact
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        mkdir -p dist
        cp -r . dist/gringo-ai-os
        cd dist
        tar -czf gringo-ai-os-${{ github.ref_name }}.tar.gz gringo-ai-os/
    
    - name: Upload release artifact
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v3
      with:
        name: gringo-ai-os-${{ github.ref_name }}
        path: dist/gringo-ai-os-${{ github.ref_name }}.tar.gz
